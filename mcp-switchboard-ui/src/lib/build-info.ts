/**
 * Build information with embedded constants generated at compile time
 * This file is automatically generated - DO NOT EDIT MANUALLY
 */

export interface BuildInfo {
  module: string;
  fingerprint: string;
  git_commit: string;
  git_headline: string;
  build_time: string;
  dependencies: DependencyInfo[];
}

export interface DependencyInfo {
  module: string;
  fingerprint: string;
  verified: boolean;
}

/**
 * All module build information consolidated
 */
export interface AllModulesInfo {
  'mcp-core': BuildInfo;
  'binding-generator': BuildInfo;
  'mcp-switchboard-ui': BuildInfo;
}

/**
 * Embedded build constants (will be replaced by build process)
 */
export const BUILD_INFO: BuildInfo = {
  module: 'mcp-switchboard-ui',
  fingerprint: '__BUILD_FINGERPRINT__',
  git_commit: '__GIT_COMMIT__', 
  git_headline: '__GIT_HEADLINE__',
  build_time: '__BUILD_TIME__',
  dependencies: [
    {
      module: 'mcp-core',
      fingerprint: '__MCP_CORE_FINGERPRINT__',
      verified: true
    },
    {
      module: 'binding-generator', 
      fingerprint: '__BINDING_GEN_FINGERPRINT__',
      verified: true
    }
  ]
};

/**
 * Load all module build information from various sources
 */
export async function getAllModulesInfo(): Promise<Partial<AllModulesInfo>> {
  const result: Partial<AllModulesInfo> = {};
  
  try {
    // Try to load from Tauri backend (production)
    const { invoke } = await import('@tauri-apps/api/core');
    const mcpCoreInfo = await invoke<BuildInfo>('get_build_info');
    result['mcp-core'] = mcpCoreInfo;
  } catch (error) {
    console.warn('Failed to load mcp-core build info from Tauri:', error);
  }
  
  // Always include frontend build info
  result['mcp-switchboard-ui'] = BUILD_INFO;
  
  // Load binding-generator info from properties if available
  try {
    const response = await fetch('/tmp/build-info-binding-generator.json');
    if (response.ok) {
      result['binding-generator'] = await response.json();
    }
  } catch (error) {
    console.debug('Binding generator info not available via fetch:', error);
  }
  
  return result;
}

/**
 * Expose build info globally for E2E access
 * Available as window.__BUILD_INFO__() in browser developer console
 */
export function exposeBuildInfo(): void {
  if (typeof window !== 'undefined') {
    (window as any).__BUILD_INFO__ = async () => {
      const allInfo = await getAllModulesInfo();
      console.group('ðŸ”§ MCP Switchboard Build Information');
      
      Object.entries(allInfo).forEach(([module, info]) => {
        if (info) {
          console.group(`ðŸ“¦ ${module}`);
          console.log(`Fingerprint: ${info.fingerprint}`);
          console.log(`Git commit: ${info.git_commit}`);
          console.log(`Git headline: ${info.git_headline}`);
          console.log(`Build time: ${info.build_time}`);
          if (info.dependencies.length > 0) {
            console.log('Dependencies:', info.dependencies);
          }
          console.groupEnd();
        }
      });
      
      console.groupEnd();
      return allInfo;
    };
    
    console.log('âœ… Build info available via window.__BUILD_INFO__()');
  }
}

/**
 * Development helper to show build info in console during development
 */
export function logBuildInfo(): void {
  if (import.meta.env?.DEV) {
    getAllModulesInfo().then(allInfo => {
      console.group('ðŸ”§ Development Build Information');
      Object.entries(allInfo).forEach(([module, info]) => {
        if (info) {
          console.log(`${module}: ${info.fingerprint.substring(0, 8)}...`);
        }
      });
      console.groupEnd();
    });
  }
}